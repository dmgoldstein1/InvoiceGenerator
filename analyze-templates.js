/**
 * Generated by GitHub Copilot (GPT-4o)
 * PDF Template Analyzer
 * 
 * Analyzes the template PDFs to extract design elements, fonts, colors, and layout
 */

const fs = require('fs');
const pdf = require('pdf-parse');

async function analyzePDF(filePath) {
  try {
    console.log(`\n=== Analyzing ${filePath} ===`);
    
    const dataBuffer = fs.readFileSync(filePath);
    const data = await pdf(dataBuffer);
    
    console.log('Pages:', data.numpages);
    console.log('Text Length:', data.text.length);
    console.log('\n--- Extracted Text ---');
    console.log(data.text);
    
    console.log('\n--- PDF Info ---');
    if (data.info) {
      console.log('Creator:', data.info.Creator);
      console.log('Producer:', data.info.Producer);
      console.log('Title:', data.info.Title);
      console.log('Subject:', data.info.Subject);
      console.log('Author:', data.info.Author);
    }
    
    console.log('\n--- Metadata ---');
    if (data.metadata) {
      console.log('Metadata:', data.metadata);
    }
    
    return data;
    
  } catch (error) {
    console.error(`Error analyzing ${filePath}:`, error.message);
    return null;
  }
}

async function main() {
  console.log('PDF Template Design Analysis');
  console.log('============================');
  
  const invoice21 = await analyzePDF('Invoice 21 for SAV-for-template.pdf');
  const invoice23 = await analyzePDF('Invoice 23 for SAV-for-template.pdf');
  
  console.log('\n=== Analysis Complete ===');
  console.log('This analysis will help identify:');
  console.log('- Font families used in the templates');
  console.log('- Color schemes and hex codes');
  console.log('- Layout structure and spacing');
  console.log('- Header images and logos');
  console.log('- Column arrangements and widths');
}

if (require.main === module) {
  main().catch(console.error);
}
