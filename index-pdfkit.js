#!/usr/bin/env node

/**
 * Generated by GitHub Copilot (GPT-4o)
 * Invoice and Cover Letter PDF Generator using PDFKit
 * 
 * This application reads YAML data and generates professional PDF invoices and cover letters
 * matching a specific visual design template. Uses PDFKit for direct PDF generation.
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const PDFDocument = require('pdfkit');

class InvoiceGeneratorPDFKit {
  constructor() {
    this.outputDir = path.join(__dirname, 'output');
    
    // Ensure output directory exists
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
    
    // Color scheme matching template design
    this.colors = {
      primary: '#2c5aa0',    // Blue
      secondary: '#666666',   // Gray
      text: '#333333',       // Dark gray
      light: '#f8f9fa',      // Light gray background
      white: '#ffffff'
    };
  }
  
  async loadYamlData(filePath) {
    try {
      const fileContents = fs.readFileSync(filePath, 'utf8');
      return yaml.load(fileContents);
    } catch (error) {
      throw new Error(`Failed to load YAML file: ${error.message}`);
    }
  }
  
  formatDate(dateStr) {
    if (typeof dateStr === 'string' && dateStr.includes('/')) {
      const parts = dateStr.split('/');
      if (parts.length === 3) {
        const month = parseInt(parts[0]);
        const day = parseInt(parts[1]);
        const year = parseInt(parts[2]);
        return `${month}/${day}/${year}`;
      }
    }
    return dateStr;
  }
  
  formatCurrency(amount) {
    if (typeof amount === 'string' && amount.startsWith('$')) {
      return amount;
    }
    return `$${parseFloat(amount).toFixed(2)}`;
  }
  
  calculateLineTotal(hours, rate) {
    if (!hours || !rate) return '';
    const rateNum = typeof rate === 'string' ? parseFloat(rate.replace('$', '')) : rate;
    return `$${(parseFloat(hours) * rateNum).toFixed(2)}`;
  }
  
  calculateTotal(items) {
    let total = 0;
    items.forEach(item => {
      if (item.hours && item.hourly_rate) {
        const rate = typeof item.hourly_rate === 'string' ? 
          parseFloat(item.hourly_rate.replace('$', '')) : item.hourly_rate;
        total += parseFloat(item.hours) * rate;
      } else if (item.amount) {
        total += parseFloat(item.amount);
      }
    });
    return total;
  }
  
  async generateCoverLetter(data, outputPath) {
    const doc = new PDFDocument({ 
      size: 'letter', 
      margins: { top: 54, bottom: 54, left: 54, right: 54 } 
    });
    
    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);
    
    // Letterhead
    doc.font('Times-Bold')
       .fontSize(16)
       .fillColor(this.colors.text)
       .text(data.invoice_details.from_contact.name, { align: 'center' });
    
    doc.font('Times-Italic')
       .fontSize(11)
       .fillColor(this.colors.secondary)
       .text(data.invoice_details.from_contact.title, { align: 'center' });
    
    doc.moveDown(0.3);
    
    doc.font('Times-Roman')
       .fontSize(10)
       .fillColor(this.colors.text)
       .text(data.invoice_details.from_contact.address, { align: 'center' })
       .text(data.invoice_details.from_contact.phone, { align: 'center' })
       .text(data.invoice_details.from_contact.email, { align: 'center' });
    
    // Line under letterhead
    doc.moveDown(0.5);
    doc.strokeColor(this.colors.text)
       .lineWidth(2)
       .moveTo(54, doc.y)
       .lineTo(doc.page.width - 54, doc.y)
       .stroke();
    
    doc.moveDown(1.5);
    
    // Date
    doc.font('Times-Roman')
       .fontSize(11)
       .text(this.formatDate(data.invoice_details.invoice_date), { align: 'right' });
    
    doc.moveDown(1);
    
    // To section
    doc.font('Times-Bold')
       .fontSize(11)
       .text(data.invoice_details.to_contact.name, { align: 'left' });
    
    if (data.invoice_details.to_contact.company) {
      doc.font('Times-Italic')
         .text(data.invoice_details.to_contact.company);
    }
    
    doc.font('Times-Roman')
       .fontSize(10)
       .text(data.invoice_details.to_contact.address)
       .text(data.invoice_details.to_contact.phone)
       .text(data.invoice_details.to_contact.email);
    
    doc.moveDown(1);
    
    // Greeting
    doc.font('Times-Roman')
       .fontSize(11)
       .text(data.cover_letter.greeting);
    
    doc.moveDown(0.5);
    
    // Body - split into paragraphs
    const paragraphs = data.cover_letter.body.split('\n\n').filter(p => p.trim().length > 0);
    paragraphs.forEach(paragraph => {
      doc.font('Times-Roman')
         .fontSize(11)
         .text(paragraph.trim(), { align: 'justify', lineGap: 2 });
      doc.moveDown(0.3);
    });
    
    doc.moveDown(1);
    
    // Closing
    doc.font('Times-Roman')
       .fontSize(11)
       .text(data.cover_letter.closing);
    
    doc.moveDown(0.5);
    
    // Signature
    doc.font('Times-Bold')
       .text(data.cover_letter.signature);
    
    // CC section if present
    if (data.invoice_details.cc_contacts && data.invoice_details.cc_contacts.length > 0) {
      doc.moveDown(1);
      doc.strokeColor('#cccccc')
         .lineWidth(1)
         .moveTo(54, doc.y)
         .lineTo(doc.page.width - 54, doc.y)
         .stroke();
      
      doc.moveDown(0.3);
      doc.font('Times-Bold')
         .fontSize(10)
         .text('CC:');
      
      data.invoice_details.cc_contacts.forEach(contact => {
        doc.font('Times-Roman')
           .text(`${contact.name} - ${contact.email}`);
      });
    }
    
    doc.end();
    
    return new Promise((resolve, reject) => {
      stream.on('finish', () => {
        console.log(`Cover letter generated: ${outputPath}`);
        resolve();
      });
      stream.on('error', reject);
    });
  }
  
  async generateInvoice(data, outputPath) {
    const doc = new PDFDocument({ 
      size: 'letter', 
      margins: { top: 36, bottom: 36, left: 36, right: 36 } 
    });
    
    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);
    
    // Invoice header
    doc.font('Helvetica-Bold')
       .fontSize(24)
       .fillColor(this.colors.primary)
       .text('INVOICE', 50, 50);
    
    // Invoice number and date
    doc.font('Helvetica-Bold')
       .fontSize(12)
       .fillColor(this.colors.secondary)
       .text('Invoice #', 450, 60, { align: 'right' });
    
    doc.font('Helvetica-Bold')
       .fontSize(16)
       .fillColor(this.colors.primary)
       .text(data.invoice_details.invoice_number, 450, 78, { align: 'right' });
    
    doc.font('Helvetica')
       .fontSize(10)
       .fillColor(this.colors.secondary)
       .text(`Date: ${this.formatDate(data.invoice_details.invoice_date)}`, 450, 100, { align: 'right' });
    
    // Line under header
    doc.strokeColor(this.colors.primary)
       .lineWidth(3)
       .moveTo(50, 120)
       .lineTo(doc.page.width - 50, 120)
       .stroke();
    
    // From section
    doc.font('Helvetica-Bold')
       .fontSize(12)
       .fillColor(this.colors.primary)
       .text('FROM', 50, 140);
    
    doc.strokeColor('#ddd')
       .lineWidth(1)
       .moveTo(50, 155)
       .lineTo(250, 155)
       .stroke();
    
    doc.font('Helvetica-Bold')
       .fontSize(11)
       .fillColor(this.colors.text)
       .text(data.invoice_details.from_contact.name, 50, 165);
    
    if (data.invoice_details.from_contact.title) {
      doc.font('Helvetica-Oblique')
         .fontSize(9)
         .fillColor(this.colors.secondary)
         .text(data.invoice_details.from_contact.title, 50, 180);
    }
    
    doc.font('Helvetica')
       .fontSize(9)
       .fillColor('#555555')
       .text(data.invoice_details.from_contact.address, 50, 195)
       .text(data.invoice_details.from_contact.phone, 50, 210)
       .text(data.invoice_details.from_contact.email, 50, 225);
    
    // To section
    doc.font('Helvetica-Bold')
       .fontSize(12)
       .fillColor(this.colors.primary)
       .text('BILL TO', 350, 140);
    
    doc.strokeColor('#ddd')
       .lineWidth(1)
       .moveTo(350, 155)
       .lineTo(550, 155)
       .stroke();
    
    doc.font('Helvetica-Bold')
       .fontSize(11)
       .fillColor(this.colors.text)
       .text(data.invoice_details.to_contact.name, 350, 165);
    
    if (data.invoice_details.to_contact.company) {
      doc.font('Helvetica-Bold')
         .fontSize(10)
         .text(data.invoice_details.to_contact.company, 350, 180);
    }
    
    doc.font('Helvetica')
       .fontSize(9)
       .fillColor('#555555')
       .text(data.invoice_details.to_contact.address, 350, 195)
       .text(data.invoice_details.to_contact.phone, 350, 210)
       .text(data.invoice_details.to_contact.email, 350, 225);
    
    // Table header
    const tableTop = 270;
    const tableLeft = 50;
    
    doc.rect(tableLeft, tableTop, doc.page.width - 100, 25)
       .fillColor(this.colors.primary)
       .fill();
    
    doc.font('Helvetica-Bold')
       .fontSize(9)
       .fillColor('white')
       .text('DATE', tableLeft + 5, tableTop + 8)
       .text('DESCRIPTION', tableLeft + 70, tableTop + 8)
       .text('TIME', tableLeft + 280, tableTop + 8)
       .text('HOURS', tableLeft + 330, tableTop + 8)
       .text('RATE', tableLeft + 380, tableTop + 8)
       .text('TOTAL', tableLeft + 450, tableTop + 8);
    
    // Table rows
    let currentY = tableTop + 25;
    let rowIndex = 0;
    
    data.invoice_items.forEach(item => {
      const rowHeight = 30;
      const isEven = rowIndex % 2 === 0;
      
      // Alternating row background
      doc.rect(tableLeft, currentY, doc.page.width - 100, rowHeight)
         .fillColor(isEven ? this.colors.light : this.colors.white)
         .fill();
      
      // Row data
      doc.font('Helvetica-Bold')
         .fontSize(9)
         .fillColor(this.colors.primary)
         .text(this.formatDate(item.date), tableLeft + 5, currentY + 8);
      
      doc.font('Helvetica')
         .fontSize(9)
         .fillColor(this.colors.text)
         .text(item.description, tableLeft + 70, currentY + 8, { width: 200, ellipsis: true });
      
      if (item.start_time && item.stop_time) {
        doc.font('Helvetica')
           .fontSize(8)
           .text(`${item.start_time} - ${item.stop_time}`, tableLeft + 280, currentY + 8);
      }
      
      if (item.hours) {
        doc.font('Helvetica-Bold')
           .fontSize(9)
           .text(item.hours.toString(), tableLeft + 330, currentY + 8, { align: 'center' });
      }
      
      if (item.hourly_rate) {
        doc.font('Helvetica-Bold')
           .fontSize(9)
           .text(this.formatCurrency(item.hourly_rate), tableLeft + 380, currentY + 8, { align: 'right' });
      }
      
      // Total
      let total;
      if (item.hours && item.hourly_rate) {
        total = this.calculateLineTotal(item.hours, item.hourly_rate);
      } else if (item.amount) {
        total = this.formatCurrency(item.amount);
      }
      
      doc.font('Helvetica-Bold')
         .fontSize(9)
         .fillColor(this.colors.primary)
         .text(total, tableLeft + 450, currentY + 8, { align: 'right' });
      
      currentY += rowHeight;
      rowIndex++;
    });
    
    // Total section
    currentY += 30;
    const totalAmount = this.calculateTotal(data.invoice_items);
    
    doc.font('Helvetica-Bold')
       .fontSize(12)
       .fillColor(this.colors.secondary)
       .text('Total Amount:', tableLeft + 350, currentY, { align: 'right' });
    
    doc.font('Helvetica-Bold')
       .fontSize(14)
       .fillColor(this.colors.primary)
       .text(this.formatCurrency(totalAmount), tableLeft + 450, currentY, { align: 'right' });
    
    // Line above total
    doc.strokeColor(this.colors.primary)
       .lineWidth(2)
       .moveTo(tableLeft + 430, currentY - 5)
       .lineTo(tableLeft + 520, currentY - 5)
       .stroke();
    
    // Footer
    currentY += 72;
    doc.strokeColor('#ddd')
       .lineWidth(1)
       .moveTo(50, currentY)
       .lineTo(doc.page.width - 50, currentY)
       .stroke();
    
    doc.font('Helvetica')
       .fontSize(8)
       .fillColor('#999999')
       .text('Thank you for your business! Payment terms: Net 30 days.', 50, currentY + 20, { align: 'center' });
    
    doc.end();
    
    return new Promise((resolve, reject) => {
      stream.on('finish', () => {
        console.log(`Invoice generated: ${outputPath}`);
        resolve();
      });
      stream.on('error', reject);
    });
  }
  
  async generateFromYaml(yamlPath, outputBaseName) {
    try {
      const data = await this.loadYamlData(yamlPath);
      
      // Generate cover letter
      const coverLetterPath = path.join(this.outputDir, `${outputBaseName}-cover-letter.pdf`);
      await this.generateCoverLetter(data, coverLetterPath);
      
      // Generate invoice
      const invoicePath = path.join(this.outputDir, `${outputBaseName}-invoice.pdf`);
      await this.generateInvoice(data, invoicePath);
      
      return {
        coverLetter: coverLetterPath,
        invoice: invoicePath
      };
    } catch (error) {
      console.error('Error generating PDFs:', error.message);
      throw error;
    }
  }
}

// CLI usage
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length < 1) {
    console.log('Usage: node index-pdfkit.js <yaml-file> [output-base-name]');
    process.exit(1);
  }
  
  const yamlFile = args[0];
  const outputBaseName = args[1] || path.basename(yamlFile, '.yaml');
  
  const generator = new InvoiceGeneratorPDFKit();
  generator.generateFromYaml(yamlFile, outputBaseName)
    .then(files => {
      console.log('Generated files:');
      console.log('Cover Letter:', files.coverLetter);
      console.log('Invoice:', files.invoice);
    })
    .catch(error => {
      console.error('Failed to generate PDFs:', error.message);
      process.exit(1);
    });
}

module.exports = InvoiceGeneratorPDFKit;
