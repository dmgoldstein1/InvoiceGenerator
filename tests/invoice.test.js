/**
 * Generated by GitHub Copilot (GPT-4)
 * Basic tests for Invoice Generator functionality
 */

const fs = require('fs');
const path = require('path');
const { InvoiceGenerator, InvoiceParser } = require('../src');

describe('Invoice Generator', () => {
    const testOutputDir = path.join(__dirname, '..', 'output', 'tests');
    
    beforeAll(() => {
        // Ensure test output directory exists
        if (!fs.existsSync(testOutputDir)) {
            fs.mkdirSync(testOutputDir, { recursive: true });
        }
    });

    afterAll(() => {
        // Clean up test files
        if (fs.existsSync(testOutputDir)) {
            const files = fs.readdirSync(testOutputDir);
            files.forEach(file => {
                fs.unlinkSync(path.join(testOutputDir, file));
            });
        }
    });

    test('should generate PDF from valid invoice data', async () => {
        const generator = new InvoiceGenerator();
        const testData = {
            company: {
                name: 'Test Company',
                address: '123 Test St',
                city: 'Test City, TC 12345',
                email: 'test@company.com'
            },
            client: {
                name: 'Test Client',
                address: '456 Client Ave',
                city: 'Client City, CC 67890'
            },
            invoice: {
                number: 'TEST-001',
                date: '2024-01-01',
                dueDate: '2024-02-01'
            },
            items: [
                {
                    description: 'Test Service',
                    quantity: '1',
                    rate: '$100.00',
                    amount: '$100.00'
                }
            ],
            summary: {
                subtotal: '$100.00',
                tax: '$8.00',
                total: '$108.00'
            }
        };

        const outputPath = path.join(testOutputDir, 'test-invoice.pdf');
        const result = await generator.generateInvoice(testData, outputPath);
        
        expect(result).toBe(outputPath);
        expect(fs.existsSync(outputPath)).toBe(true);
        
        const stats = fs.statSync(outputPath);
        expect(stats.size).toBeGreaterThan(0);
    });

    test('should parse YAML format invoice file', () => {
        const parser = new InvoiceParser();
        const yamlContent = `---
company:
  name: "Test Company"
  email: "test@company.com"

client:
  name: "Test Client"

invoice:
  number: "TEST-001"
  date: "2024-01-01"

items:
  - description: "Test Service"
    quantity: "1"
    rate: "$100.00"
    amount: "$100.00"

summary:
  total: "$100.00"
`;

        const result = parser.parseContent(yamlContent);
        
        expect(result.company.name).toBe('Test Company');
        expect(result.client.name).toBe('Test Client');
        expect(result.invoice.number).toBe('TEST-001');
        expect(result.items).toHaveLength(1);
        expect(result.items[0].description).toBe('Test Service');
    });

    test('should parse markdown table format', () => {
        const parser = new InvoiceParser();
        const markdownContent = `# Invoice

## Company Information
Test Company
test@company.com

## Client Information
Test Client

## Invoice Details
Invoice Number: TEST-002
Date: 2024-01-01

## Items

| Description | Quantity | Rate | Amount |
|-------------|----------|------|--------|
| Test Service | 1 | $100.00 | $100.00 |
| Another Service | 2 | $50.00 | $100.00 |

## Summary
Total: $200.00
`;

        const result = parser.parseContent(markdownContent);
        
        expect(result.company.name).toBe('Test Company');
        expect(result.client.name).toBe('Test Client');
        expect(result.invoice.number).toBe('TEST-002');
        expect(result.items).toHaveLength(2);
        expect(result.summary.total).toBe('$200.00');
    });

    test('should handle missing optional fields gracefully', async () => {
        const generator = new InvoiceGenerator();
        const minimalData = {
            company: { name: 'Minimal Company' },
            client: { name: 'Minimal Client' },
            invoice: { number: 'MIN-001' },
            items: [],
            summary: {}
        };

        const outputPath = path.join(testOutputDir, 'minimal-invoice.pdf');
        const result = await generator.generateInvoice(minimalData, outputPath);
        
        expect(result).toBe(outputPath);
        expect(fs.existsSync(outputPath)).toBe(true);
    });
});

describe('Invoice Parser', () => {
    test('should validate required fields', () => {
        const parser = new InvoiceParser();
        const invalidContent = `---
company:
  name: "Test Company"
# Missing client name and invoice number
`;

        // Should not throw, but should warn about missing fields
        const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
        const result = parser.parseContent(invalidContent);
        
        expect(consoleSpy).toHaveBeenCalledWith(
            expect.stringContaining('Warning: Missing recommended fields')
        );
        
        consoleSpy.mockRestore();
    });
});