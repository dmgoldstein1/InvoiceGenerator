#!/usr/bin/env node

/**
 * Generated by GitHub Copilot (GPT-4o)
 * Invoice and Cover Letter PDF Generator
 * 
 * This application reads YAML data and generates professional PDF invoices and cover letters
 * matching a specific visual design template. It handles both time-based billing and fixed amounts.
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const puppeteer = require('puppeteer');
const handlebars = require('handlebars');
const moment = require('moment');

class InvoiceGenerator {
  constructor() {
    this.templateDir = path.join(__dirname, 'templates');
    this.outputDir = path.join(__dirname, 'output');
    
    // Ensure output directory exists
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
    
    // Register Handlebars helpers
    this.registerHelpers();
  }
  
  registerHelpers() {
    // Format currency
    handlebars.registerHelper('currency', function(amount) {
      if (typeof amount === 'string' && amount.startsWith('$')) {
        return amount;
      }
      return `$${parseFloat(amount).toFixed(2)}`;
    });
    
    // Calculate line total for time-based items
    handlebars.registerHelper('lineTotal', function(hours, rate) {
      if (!hours || !rate) return '';
      const rateNum = typeof rate === 'string' ? parseFloat(rate.replace('$', '')) : rate;
      return `$${(parseFloat(hours) * rateNum).toFixed(2)}`;
    });
    
    // Format date
    handlebars.registerHelper('formatDate', function(date) {
      // Handle common US date formats
      if (typeof date === 'string') {
        if (date.includes('/')) {
          // Parse MM/DD/YYYY or M/D/YYYY format
          const parts = date.split('/');
          if (parts.length === 3) {
            const month = parseInt(parts[0]);
            const day = parseInt(parts[1]);
            const year = parseInt(parts[2]);
            return `${month}/${day}/${year}`;
          }
        }
      }
      return moment(date).format('M/D/YYYY');
    });
    
    // Check if item has time-based billing
    handlebars.registerHelper('isTimeBased', function(item) {
      return item.hours && item.hourly_rate;
    });
    
    // Check if item has fixed amount
    handlebars.registerHelper('isFixedAmount', function(item) {
      return item.amount && !item.hours;
    });
    
    // Calculate total for all items
    handlebars.registerHelper('calculateTotal', function(items) {
      let total = 0;
      items.forEach(item => {
        if (item.hours && item.hourly_rate) {
          const rate = typeof item.hourly_rate === 'string' ? 
            parseFloat(item.hourly_rate.replace('$', '')) : item.hourly_rate;
          total += parseFloat(item.hours) * rate;
        } else if (item.amount) {
          total += parseFloat(item.amount);
        }
      });
      return `$${total.toFixed(2)}`;
    });
    
    // Split text into paragraphs
    handlebars.registerHelper('split', function(text, delimiter) {
      if (!text) return [];
      return text.split(delimiter).filter(p => p.trim().length > 0);
    });
  }
  
  async loadYamlData(filePath) {
    try {
      const fileContents = fs.readFileSync(filePath, 'utf8');
      return yaml.load(fileContents);
    } catch (error) {
      throw new Error(`Failed to load YAML file: ${error.message}`);
    }
  }
  
  async loadTemplate(templateName) {
    const templatePath = path.join(this.templateDir, `${templateName}.hbs`);
    try {
      const templateContent = fs.readFileSync(templatePath, 'utf8');
      return handlebars.compile(templateContent);
    } catch (error) {
      throw new Error(`Failed to load template ${templateName}: ${error.message}`);
    }
  }
  
  async generatePDF(htmlContent, outputPath) {
    const browser = await puppeteer.launch({
      headless: 'new',
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ],
      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || undefined
    });
    
    try {
      const page = await browser.newPage();
      await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
      
      await page.pdf({
        path: outputPath,
        format: 'A4',
        printBackground: true,
        margin: {
          top: '0.5in',
          right: '0.5in',
          bottom: '0.5in',
          left: '0.5in'
        }
      });
      
      console.log(`PDF generated successfully: ${outputPath}`);
    } finally {
      await browser.close();
    }
  }
  
  async generateFromYaml(yamlPath, outputBaseName) {
    try {
      const data = await this.loadYamlData(yamlPath);
      
      // Generate cover letter
      const coverLetterTemplate = await this.loadTemplate('cover-letter');
      const coverLetterHtml = coverLetterTemplate(data);
      const coverLetterPath = path.join(this.outputDir, `${outputBaseName}-cover-letter.pdf`);
      await this.generatePDF(coverLetterHtml, coverLetterPath);
      
      // Generate invoice
      const invoiceTemplate = await this.loadTemplate('invoice');
      const invoiceHtml = invoiceTemplate(data);
      const invoicePath = path.join(this.outputDir, `${outputBaseName}-invoice.pdf`);
      await this.generatePDF(invoiceHtml, invoicePath);
      
      return {
        coverLetter: coverLetterPath,
        invoice: invoicePath
      };
    } catch (error) {
      console.error('Error generating PDFs:', error.message);
      throw error;
    }
  }
}

// CLI usage
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length < 1) {
    console.log('Usage: node index.js <yaml-file> [output-base-name]');
    process.exit(1);
  }
  
  const yamlFile = args[0];
  const outputBaseName = args[1] || path.basename(yamlFile, '.yaml');
  
  const generator = new InvoiceGenerator();
  generator.generateFromYaml(yamlFile, outputBaseName)
    .then(files => {
      console.log('Generated files:');
      console.log('Cover Letter:', files.coverLetter);
      console.log('Invoice:', files.invoice);
    })
    .catch(error => {
      console.error('Failed to generate PDFs:', error.message);
      process.exit(1);
    });
}

module.exports = InvoiceGenerator;
