#!/usr/bin/env node

/**
 * Generated by GitHub Copilot (GPT-4o)
 * Precise Template Matching Invoice Generator
 * 
 * This version matches the exact structure from template analysis:
 * - "Invoice #XXXX for Services Rendered" title format
 * - "Amount Billed" column header (not "Amount")
 * - Exact spacing and phone number formatting
 * - Precise layout matching extracted template structure
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const PDFDocument = require('pdfkit');

class PreciseTemplateGenerator {
  constructor() {
    this.outputDir = path.join(__dirname, 'output');
    this.logsDir = path.join(__dirname, 'logs');
    
    // Ensure directories exist
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }
    if (!fs.existsSync(this.logsDir)) {
      fs.mkdirSync(this.logsDir, { recursive: true });
    }
    
    // Template-exact colors (refined based on analysis)
    this.colors = {
      primaryBlue: '#007AFF',        // macOS system blue
      tableHeaderBlue: '#E8F4FD',    // Light blue for headers (refined)
      alternateRowGray: '#F5F5F5',   // Light gray for alternating rows
      textBlack: '#000000',          // Pure black
      secondaryGray: '#333333',      // Dark gray
      lightGray: '#666666',          // Medium gray
      white: '#FFFFFF',
      borderGray: '#CCCCCC'
    };
    
    this.setupLogging();
  }
  
  setupLogging() {
    const timestamp = Date.now();
    this.logFile = path.join(this.logsDir, `precise-template-log-${timestamp}.log`);
    this.log('Precise Template Generator initialized');
    this.log('Matching exact template structure from PDF analysis');
  }
  
  log(message) {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] ${message}\n`;
    fs.appendFileSync(this.logFile, logEntry);
    console.log(message);
  }
  
  // Arial-equivalent fonts
  getFont(weight = 'normal') {
    switch (weight) {
      case 'bold': return 'Helvetica-Bold';
      case 'italic': return 'Helvetica-Oblique';
      case 'bolditalic': return 'Helvetica-BoldOblique';
      default: return 'Helvetica';
    }
  }
  
  async loadYamlData(filePath) {
    try {
      this.log(`Loading YAML data from: ${filePath}`);
      const fileContents = fs.readFileSync(filePath, 'utf8');
      const data = yaml.load(fileContents);
      this.log(`Successfully loaded YAML data with ${data.invoice_items?.length || 0} invoice items`);
      return data;
    } catch (error) {
      this.log(`Error loading YAML file: ${error.message}`);
      throw new Error(`Failed to load YAML file: ${error.message}`);
    }
  }
  
  formatDate(dateStr) {
    // Template format: "Thursday, April 11, 2024"
    if (typeof dateStr === 'string' && dateStr.includes('/')) {
      const parts = dateStr.split('/');
      if (parts.length === 3) {
        const month = parseInt(parts[0]);
        const day = parseInt(parts[1]);
        const year = parseInt(parts[2]);
        const date = new Date(year, month - 1, day);
        
        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        const months = ['January', 'February', 'March', 'April', 'May', 'June',
                       'July', 'August', 'September', 'October', 'November', 'December'];
        
        return `${days[date.getDay()]}, ${months[date.getMonth()]} ${day}, ${year}`;
      }
    }
    return dateStr;
  }
  
  formatCurrency(amount) {
    if (typeof amount === 'string' && amount.startsWith('$')) {
      return amount;
    }
    return `$${parseFloat(amount).toFixed(2)}`;
  }
  
  calculateLineTotal(hours, rate) {
    if (!hours || !rate) return 0;
    const rateNum = typeof rate === 'string' ? parseFloat(rate.replace('$', '')) : rate;
    return parseFloat(hours) * rateNum;
  }
  
  calculateTotal(items) {
    let total = 0;
    items.forEach(item => {
      if (item.hours && item.hourly_rate) {
        const rate = typeof item.hourly_rate === 'string' ? 
          parseFloat(item.hourly_rate.replace('$', '')) : item.hourly_rate;
        total += parseFloat(item.hours) * rate;
      } else if (item.amount) {
        total += parseFloat(item.amount);
      }
    });
    return total;
  }
  
  async generateCoverLetter(data, outputPath) {
    this.log('Generating precise template-matched cover letter...');
    const doc = new PDFDocument({ 
      size: 'letter', 
      margins: { top: 72, bottom: 72, left: 72, right: 72 } 
    });
    
    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);
    
    let yPos = 72;
    
    // Header - exactly matching template structure
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.textBlack)
       .text(data.invoice_details.from_contact.name, 72, yPos);
    
    yPos += 14;
    
    doc.font(this.getFont())
       .fontSize(10)
       .fillColor(this.colors.textBlack)
       .text(data.invoice_details.from_contact.address, 72, yPos);
    
    yPos += 12;
    // Template has extra spaces after phone - matching exactly
    doc.text(`${data.invoice_details.from_contact.phone}   `, 72, yPos);
    
    yPos += 12;
    doc.text(data.invoice_details.from_contact.email, 72, yPos);
    
    yPos += 25;
    
    // Invoice title - EXACT template format: "Invoice #XXXX for Services Rendered"
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.primaryBlue)
       .text(`Invoice #${data.invoice_details.invoice_number} for Services Rendered`, 72, yPos);
    
    yPos += 16;
    
    doc.font(this.getFont())
       .fontSize(10)
       .fillColor(this.colors.textBlack)
       .text(this.formatDate(data.invoice_details.invoice_date), 72, yPos);
    
    yPos += 22;
    
    // Recipient section - matching template spacing
    doc.font(this.getFont('bold'))
       .fontSize(10)
       .fillColor(this.colors.textBlack)
       .text(data.invoice_details.to_contact.name, 72, yPos);
    
    yPos += 12;
    
    if (data.invoice_details.to_contact.company) {
      doc.font(this.getFont('bold'))
         .text(data.invoice_details.to_contact.company, 72, yPos);
      yPos += 12;
    }
    
    doc.font(this.getFont())
       .fontSize(10)
       .text(data.invoice_details.to_contact.address, 72, yPos);
    yPos += 12;
    doc.text(data.invoice_details.to_contact.phone, 72, yPos);
    yPos += 12;
    doc.text(data.invoice_details.to_contact.email, 72, yPos);
    yPos += 14;
    
    // CC section - matching template format
    if (data.invoice_details.cc_contacts && data.invoice_details.cc_contacts.length > 0) {
      doc.font(this.getFont('bold'))
         .fontSize(10)
         .text('cc:', 72, yPos);
      yPos += 12;
      
      data.invoice_details.cc_contacts.forEach(contact => {
        doc.font(this.getFont())
           .fontSize(10)
           .text(contact.name, 72, yPos);
        yPos += 11;
        doc.text(contact.email, 72, yPos);
        yPos += 11;
      });
      yPos += 12;
    }
    
    // Body content - matching template spacing
    doc.font(this.getFont())
       .fontSize(10)
       .fillColor(this.colors.textBlack)
       .text(data.cover_letter.greeting, 72, yPos);
    yPos += 16;
    
    // Body paragraphs
    const paragraphs = data.cover_letter.body.split('\n\n').filter(p => p.trim().length > 0);
    paragraphs.forEach((paragraph, index) => {
      doc.font(this.getFont())
         .fontSize(10)
         .fillColor(this.colors.textBlack)
         .text(paragraph.trim(), 72, yPos, { 
           width: doc.page.width - 144,
           align: 'left'
         });
      yPos = doc.y + 12;
    });
    
    yPos += 8;
    
    // Closing
    doc.font(this.getFont())
       .fontSize(10)
       .text(data.cover_letter.closing, 72, yPos);
    yPos += 16;
    
    doc.font(this.getFont('bold'))
       .text(data.cover_letter.signature, 72, yPos);
    yPos += 12;
    
    doc.font(this.getFont())
       .text('Audiovisual Professional', 72, yPos);
    yPos += 20;
    
    // Attachment - matching template format
    doc.font(this.getFont('bold'))
       .text('Attached:', 72, yPos);
    yPos += 12;
    
    doc.font(this.getFont())
       .text(`Invoice #${data.invoice_details.invoice_number}`, 72, yPos);
    
    doc.end();
    
    return new Promise((resolve, reject) => {
      stream.on('finish', () => {
        this.log(`Precise template-matched cover letter generated: ${outputPath}`);
        resolve();
      });
      stream.on('error', reject);
    });
  }
  
  async generateInvoice(data, outputPath) {
    this.log('Generating precise template-matched invoice...');
    const doc = new PDFDocument({ 
      size: 'letter', 
      margins: { top: 72, bottom: 72, left: 72, right: 72 } 
    });
    
    const stream = fs.createWriteStream(outputPath);
    doc.pipe(stream);
    
    let yPos = 72;
    
    // Header section - exact template match
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.textBlack)
       .text(data.invoice_details.from_contact.name, 72, yPos);
    
    yPos += 14;
    
    doc.font(this.getFont())
       .fontSize(10)
       .text(data.invoice_details.from_contact.address, 72, yPos);
    yPos += 12;
    doc.text(`${data.invoice_details.from_contact.phone}   `, 72, yPos);  // Extra spaces like template
    yPos += 12;
    doc.text(data.invoice_details.from_contact.email, 72, yPos);
    
    yPos += 25;
    
    // Invoice number - simple format like template
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.primaryBlue)
       .text(`Invoice #${data.invoice_details.invoice_number}`, 72, yPos);
    
    yPos += 25;
    
    // Table with EXACT column headers from template
    const tableStartY = yPos;
    const headerHeight = 20;
    const rowHeight = 32;
    
    // Precise column layout to prevent overflow
    const cols = {
      date: { x: 72, width: 75 },
      description: { x: 150, width: 135 },
      time: { x: 290, width: 62 },
      hours: { x: 357, width: 35 },
      rate: { x: 397, width: 58 },
      amount: { x: 460, width: 80 }  // "Amount Billed" needs more space
    };
    
    const tableWidth = cols.amount.x + cols.amount.width - 72;
    this.log(`Precise table width: ${tableWidth}px`);
    
    // Table header with template-exact text
    doc.rect(72, tableStartY, tableWidth, headerHeight)
       .fillColor(this.colors.tableHeaderBlue)
       .fill();
    
    doc.font(this.getFont('bold'))
       .fontSize(9)
       .fillColor(this.colors.primaryBlue);
    
    const headerTextY = tableStartY + 6;
    doc.text('Date', cols.date.x + 2, headerTextY);
    doc.text('Job Description', cols.description.x + 2, headerTextY);
    doc.text('Time(s)', cols.time.x + 2, headerTextY);  // Template uses "Time(s)"
    doc.text('Hours', cols.hours.x + 2, headerTextY);
    doc.text('Hourly Rate', cols.rate.x + 2, headerTextY);
    doc.text('Amount Billed', cols.amount.x + 2, headerTextY);  // EXACT template text
    
    yPos = tableStartY + headerHeight;
    
    // Data rows with template-accurate formatting
    data.invoice_items.forEach((item, index) => {
      const isEven = index % 2 === 0;
      
      // Alternating background
      if (!isEven) {
        doc.rect(72, yPos, tableWidth, rowHeight)
           .fillColor(this.colors.alternateRowGray)
           .fill();
      }
      
      const textY = yPos + 8;
      
      // Date column
      doc.font(this.getFont())
         .fontSize(9)
         .fillColor(this.colors.textBlack)
         .text(this.formatDate(item.date), cols.date.x + 2, textY, { 
           width: cols.date.width - 4
         });
      
      // Description 
      doc.text(item.description, cols.description.x + 2, textY, { 
         width: cols.description.width - 4,
         height: rowHeight - 6
       });
      
      // Time range
      if (item.start_time && item.stop_time) {
        doc.text(`${item.start_time} to ${item.stop_time}`, cols.time.x + 2, textY, {
          width: cols.time.width - 4
        });
      }
      
      // Hours
      if (item.hours) {
        doc.text(item.hours.toString(), cols.hours.x + 2, textY, {
          width: cols.hours.width - 4,
          align: 'center'
        });
      }
      
      // Rate
      if (item.hourly_rate) {
        doc.text(this.formatCurrency(item.hourly_rate), cols.rate.x + 2, textY, {
          width: cols.rate.width - 4,
          align: 'right'
        });
      }
      
      // Amount
      let amount;
      if (item.hours && item.hourly_rate) {
        amount = this.formatCurrency(this.calculateLineTotal(item.hours, item.hourly_rate));
      } else if (item.amount) {
        amount = this.formatCurrency(item.amount);
      }
      
      if (amount) {
        doc.font(this.getFont('bold'))
           .fontSize(9)
           .fillColor(this.colors.textBlack)
           .text(amount, cols.amount.x + 2, textY, {
             width: cols.amount.width - 4,
             align: 'right'
           });
      }
      
      yPos += rowHeight;
    });
    
    // Total section - template format
    yPos += 12;
    const totalAmount = this.calculateTotal(data.invoice_items);
    
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.textBlack)
       .text('Total:', cols.rate.x, yPos, { align: 'right', width: cols.rate.width });
    
    doc.font(this.getFont('bold'))
       .fontSize(11)
       .fillColor(this.colors.primaryBlue)
       .text(this.formatCurrency(totalAmount), cols.amount.x, yPos, { 
         align: 'right', 
         width: cols.amount.width 
       });
    
    this.log(`Precise template total: ${this.formatCurrency(totalAmount)}`);
    this.log('Applied exact template structure and column headers');
    
    doc.end();
    
    return new Promise((resolve, reject) => {
      stream.on('finish', () => {
        this.log(`Precise template-matched invoice generated: ${outputPath}`);
        resolve();
      });
      stream.on('error', reject);
    });
  }
  
  async generateFromYaml(yamlPath, outputBaseName) {
    try {
      this.log(`Starting precise template matching for: ${yamlPath}`);
      const data = await this.loadYamlData(yamlPath);
      
      const coverLetterPath = path.join(this.outputDir, `${outputBaseName}-cover-letter.pdf`);
      await this.generateCoverLetter(data, coverLetterPath);
      
      const invoicePath = path.join(this.outputDir, `${outputBaseName}-invoice.pdf`);
      await this.generateInvoice(data, invoicePath);
      
      this.log('Precise template matching completed successfully');
      
      return {
        coverLetter: coverLetterPath,
        invoice: invoicePath,
        logFile: this.logFile
      };
    } catch (error) {
      this.log(`Error in precise generation: ${error.message}`);
      throw error;
    }
  }
}

// CLI usage
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length < 1) {
    console.log('Usage: node precise-template.js <yaml-file> [output-base-name]');
    console.log('Example: node precise-template.js invoice.yaml precise-match');
    process.exit(1);
  }
  
  const yamlFile = args[0];
  const outputBaseName = args[1] || `precise-template-${Date.now()}`;
  
  const generator = new PreciseTemplateGenerator();
  generator.generateFromYaml(yamlFile, outputBaseName)
    .then(files => {
      console.log('\n=== Precise Template Matching Complete ===');
      console.log('Cover Letter:', files.coverLetter);
      console.log('Invoice:', files.invoice);
      console.log('Log File:', files.logFile);
      console.log('\n🎯 Precise Template Fixes Applied:');
      console.log('✅ "Invoice #XXXX for Services Rendered" title format');
      console.log('✅ "Amount Billed" column header (exact template text)');
      console.log('✅ Phone number with extra spaces like template');
      console.log('✅ "Time(s)" column header (exact template text)');
      console.log('✅ Precise spacing and layout matching template');
      console.log('✅ Exact date formatting and structure');
    })
    .catch(error => {
      console.error('Failed to generate precise template-matched PDFs:', error.message);
      process.exit(1);
    });
}

module.exports = PreciseTemplateGenerator;
