#!/usr/bin/env node

/**
 * Generated by GitHub Copilot (GPT-4)
 * Invoice Generator CLI
 * 
 * Command-line interface for generating PDF invoices from markdown-like input files.
 */

const fs = require('fs');
const path = require('path');
const InvoiceGenerator = require('./InvoiceGenerator');
const InvoiceParser = require('./InvoiceParser');

class InvoiceCLI {
    constructor() {
        this.generator = new InvoiceGenerator();
        this.parser = new InvoiceParser();
    }

    /**
     * Display usage information
     */
    showHelp() {
        console.log(`
Invoice Generator - Create professional PDF invoices from markdown-like input

Usage:
  invoice-generator <input-file> [output-file]
  
Arguments:
  input-file    Path to the markdown invoice file
  output-file   Path for the generated PDF (optional, defaults to input filename with .pdf extension)

Options:
  --help, -h    Show this help message
  --version, -v Show version information

Examples:
  invoice-generator invoice.md
  invoice-generator invoice.md output/invoice-001.pdf
  
Input File Format:
  The input file should be a markdown-like format with sections for company info,
  client info, invoice details, items table, and totals. See examples/ directory
  for sample input files.
        `);
    }

    /**
     * Show version information
     */
    showVersion() {
        const packagePath = path.join(__dirname, '..', 'package.json');
        try {
            const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            console.log(`Invoice Generator v${packageData.version}`);
        } catch (error) {
            console.log('Invoice Generator v1.0.0');
        }
    }

    /**
     * Process command line arguments and generate invoice
     */
    async run(args) {
        try {
            // Parse command line arguments
            const options = this.parseArgs(args);
            
            if (options.help) {
                this.showHelp();
                return;
            }
            
            if (options.version) {
                this.showVersion();
                return;
            }
            
            if (!options.inputFile) {
                console.error('Error: Input file is required');
                this.showHelp();
                process.exit(1);
            }
            
            // Validate input file exists
            if (!fs.existsSync(options.inputFile)) {
                console.error(`Error: Input file '${options.inputFile}' not found`);
                process.exit(1);
            }
            
            // Generate output filename if not provided
            if (!options.outputFile) {
                const inputDir = path.dirname(options.inputFile);
                const inputName = path.basename(options.inputFile, path.extname(options.inputFile));
                options.outputFile = path.join(inputDir, `${inputName}.pdf`);
            }
            
            // Ensure output directory exists
            const outputDir = path.dirname(options.outputFile);
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }
            
            console.log(`Generating invoice from: ${options.inputFile}`);
            console.log(`Output will be saved to: ${options.outputFile}`);
            
            // Parse input file
            const invoiceData = this.parser.parseFile(options.inputFile);
            
            // Generate PDF
            const result = await this.generator.generateInvoice(invoiceData, options.outputFile);
            
            console.log(`Invoice generated successfully: ${result}`);
            
        } catch (error) {
            console.error(`Error generating invoice: ${error.message}`);
            process.exit(1);
        }
    }

    /**
     * Parse command line arguments
     */
    parseArgs(args) {
        const options = {
            help: false,
            version: false,
            inputFile: null,
            outputFile: null
        };
        
        for (let i = 0; i < args.length; i++) {
            const arg = args[i];
            
            if (arg === '--help' || arg === '-h') {
                options.help = true;
            } else if (arg === '--version' || arg === '-v') {
                options.version = true;
            } else if (!options.inputFile) {
                options.inputFile = arg;
            } else if (!options.outputFile) {
                options.outputFile = arg;
            }
        }
        
        return options;
    }
}

// Run CLI if called directly
if (require.main === module) {
    const cli = new InvoiceCLI();
    cli.run(process.argv.slice(2));
}

module.exports = InvoiceCLI;